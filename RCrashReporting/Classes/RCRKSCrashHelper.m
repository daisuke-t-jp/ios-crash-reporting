#import "RCRKSCrashHelper.h"

@implementation RCRKSCrashHelper : NSObject

/**
 * Returns bundle ID of application.
 */
+ (NSString*)getBundleName
{
    NSString* bundleName = [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleName"];
    if (bundleName == nil)
    {
        bundleName = @"Unknown";
    }
    
    return bundleName;
}

/**
 * Returns string of directory path to locate crash reports or nil if cache directory is not found.
 * Format starts from the 'Library/Caches' directory of the device and then append 'KSCrash/<Bundle ID Name>/Reports'
 */
+ (NSString*)getReportsPath
{
    NSArray* directories = NSSearchPathForDirectoriesInDomains(NSCachesDirectory,
                                                               NSUserDomainMask,
                                                               YES);
    
    if ([directories count] == 0)
    {
        return nil;
    }
    
    NSString* cachePath = [directories objectAtIndex:0];
    
    if ([cachePath length] == 0)
    {
        return nil;
    }
    
    NSString* pathEnd = [@"KSCrash" stringByAppendingPathComponent:[self getBundleName]];
    NSString* reportsEnd = [pathEnd stringByAppendingString:@"/Reports"];
    
    return [cachePath stringByAppendingPathComponent:reportsEnd];
}

/**
 * Returns array of strings containing individual crash report file name.
 */
+ (NSArray*)getReportFilesName
{
    NSString* path = [self getReportsPath];
    NSArray* fileNameAtDir = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:path error:nil];
    
    return [fileNameAtDir filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"SELF ENDSWITH '.json'"]];
}

/**
 * Method will read each crash report file generated by KSCrash and
 * copy each report's content into an array as a string.
 * Returns an array of strings containing crash reports or nil if no reports are found.
 */
+ (NSArray <NSDictionary *> *)getArrayOfCrashReports
{
    NSMutableArray* arrOfCrashReports = [[NSMutableArray alloc] init];
    NSString* reportsDirPath = [self getReportsPath];
    NSArray* arrOfReportFileNames = [self getReportFilesName];
    
    for (int i = 0; i < [arrOfReportFileNames count]; i++)
    {
        NSString* reportsDirPathWithSlash = [reportsDirPath stringByAppendingString:@"/"];
        NSString* filePath = [reportsDirPathWithSlash stringByAppendingString:[arrOfReportFileNames objectAtIndex:i]];
        
        if (filePath)
        {
            NSData* crashData = [[NSData alloc] initWithContentsOfFile:filePath];
            NSError* error;
            NSDictionary* individualCrashDictionary = [NSJSONSerialization JSONObjectWithData:crashData
                                                                                      options:0
                                                                                        error:&error];
            
            if (!individualCrashDictionary)
            {
                return nil;
            }
            
            [arrOfCrashReports addObject:individualCrashDictionary];
        }
    }
    
    return arrOfCrashReports;
}

@end
